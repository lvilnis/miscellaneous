Let's start putting together a _real_ Scala style guide that has code samples and isn't wishy-washy

Scala syntax is insanely hard to write a style guide for. That's because there are so many different ways to write any given thing, the temptation is to avoid being proscriptive and just give a series of "suggestions". This probably works for some people. Unfortunately, for people such as myself who have a touch of OCD when it comes to how their code looks, the lack of any sort of standard is extremely distracting and fatiguing. I currently waste a lot of energy while coding, trying to figure out which of the 10 bajillion rules in the current Scala style guide applies to my situation. As a measure of how useless that style guide is (to me - I'm sure it works well for some people whose brains are wired differently than mine), it contains relatively few code samples (!). Any style guide which must be described in prose as opposed to merely shown, is going to require way too much thinking to fulfull the primary goal of a style guide: A style guide, like a dress code, is meant to remove the element of distraction caused by non-standard appearance, so that the students (programmers) are free to concentrate on the task at hand without worrying whether their ass looks fat in those jeans (curly braces).

Scala presents another unique challenge in that it is a very handsome language. Going through this style guide and looking in the "BAD" sections to see what syntax is prohibited, one will be struck by the fact that the so-called "BAD" choices often look really pretty. This is beside the point - I'm just trying to pick a syntax that is as uniform and robust as possible for things like method chaining (and has no special cases to think about).

At the end of this style guide I will attempt a couple of "case studies", where I go through reasonably sized existing chunks of code and confirm that this style guide is as unambiguous as possible in real-life coding situations.


 - LAMBDAS:
   Lambdas should be surrounded with curly braces only when multi-line, when used as block arguments to "operator" notation (which means they should be multi line), or "case" lambdas which require them. Operator notation should only be used as described in the separate "Infix ("operator") notation" item. It's really tempting to say "oh, just surround every function with curly braces" but it leads to such monstrosities as using curly braces in place of parentheses in non-operator notation, which looks fugly, overloads curly braces too much, and creates nasty irregularity with regular methods which are called with parens, as well as functions that take multiple functions as arguments. the point of functional programming is that functions are regular values like anything else - introducing special notation that turns functions into weird bumpy second-class citizens is antithetical to this idea.

   The lambda arguments for multi-line lambdas can go either on the same line as the starting curly brace, or the next line for a single-line-body (this applies to regular and case lambdas). Just do whatever looks good. Avoid using them on the next line and then indenting again for the body. The argument should usually go inside the curly braces - I haven't yet decided when/whether its ok to put the argument outside. 

   BAD:

   // this sort of grows on you. we'll revisit but I think it's just too damn weird.
   xs.toSeq.filter{pred(_)}.map{_ + 1}.toArray                // too cramped and bizzare. are those curly braces in there?
   xs.toSeq.filter{ pred(_) }.foreach{ _ + 1 }.toArray        // too unbalanced
   xs.toSeq.filter { pred(_) }.foreach { _ + 1 }.toArray      // too unbalanced
   xs.toSeq .filter { pred(_) } .foreach { _ + 1 } .toArray   // lolwut?!? a possibility but overlaps too much w/ operator notation that we get a cognitive load
   xs .toSeq .filter { pred(_) } .foreach { _ + 1 } .toArray  // see above (plus the "."'s feel like they're pulling my eye left or something)

   val result = xs.toSeq filter { 
     x =>
       calling(a).big.long.method(arent).you.glad.its.on.its.own.line(x)
   }

   GOOD:

   // Oh sweet, merciful unambiguity!!
   xs.toSeq.filter(pred(_)).map(_ + 1).toArray

   val result = xs.toSeq filter { x =>
     calling(a).big.long.method(arent).you.glad.its.on.its.own.line(x)
   }

   val result = xs.toSeq filter { 
     x => calling(a).big.long.method(arent).you.glad.its.on.its.own.line(x)
   }

 - INFIX NOTATION:
   Infix ("operator") notation: use this with symbolic methods, or single-arg-list higher-order functions _when the function spans multiple lines_, and when the call comes in the last position of the expression. In this case we're basically treating it as a control structure. No chaining - if you want to chain, use dots and parentheses. This is very much like the suggested use of Ruby blocks.

   The reason to eschew operator notation whenever possible, is that it is very brittle - if a call to a multi-argument method, or a 0 argument method (much more common), is added to a chain of infix calls, the entire chain must be surrounded with parentheses, or we must change it from infix to dotted notation. This is unacceptable - requiring these sort of non-local syntax changes just for something as audacious as calling a 0-argument method creates weird incentives on the programmer to avoid such calls, break everything into intermediate variables (often annoying), and generally to spend inordinate time thinking about syntax. This is exhausting.

   Excessive use of infix notation also makes it hard to see what are the arguments and what are the methods - those parentheses really kinda do serve a point, you know (this is not much of a problem with lambdas, and if it was, one could rightfully suggest surrounding every lambda with curly braces as a solution). 

   There are a few built-in (standard lib) methods that are sort of treated like binary operators - you can decide for your self which ones are appropriate w/ infix notation. I would recommend not doing more than a handful of operators this way, or else you'll basically defeat the purpose of this guide in be back in thinking-way-too-much-about-syntax land:
   
   GOOD:
   "to" and "until" are totally allowed to be infix. they are basically keywords (you could also say they're part of an internal DSL for generating sequences).
   "format" is built-in to scala and is first-class-feeling-enough that it can be used infix (it also is almost never chained. This is tentative and may be revoked.)
   BAD:
   take, drop, contains, zip, etc. These are just standard, often-chained methods for dealing w/ sequences. Allow these and you're back to square one.

   Here's another thing to consider... maybe not allow infix at all for HOFs, but still allow the final "block" argument to be used w/o parens - this is just like Ruby blocks:
   xs.toSeq.foreach { x =>
     if (pred(x))
  	   items.add(x)
   }

   GOOD:
  
   xs.toSeq foreach { x =>
     if (pred(x))
  	   items.add(x)
   }

   "%d + %d = %d" format (1, 2, 1 + 2)
  
   xs.toSeq.filter(pred _).foreach(items.add(_))
   xs.toSeq.filter(pred(_)).foreach(items.add(_))

   val x = 12 + 87

   authorsToWordsAndCounts(author).getOrElse(word, 0) + 1

   BAD:
   // even this doesn't look that bad. consider skipping operator notation altogether for anything but symbolic methods.
   xs.toSeq.foreach(x => {
     if (pred(x))
  	   items.add(x)
   })

   // These syntaxes are seductive at first, but they either violate our ewgrosscurlybracesusedasparentheses rule, or make it impossible to add postfix calls
   xs.toSeq filter (pred _) foreach (items add _)
   xs.toSeq filter { pred _ } foreach { items add _ }
   xs.toSeq filter { pred(_) } foreach { items.add(_) }
   xs.toSeq.filter{pred(_)}.foreach{items.add(_)}
   xs.toSeq.filter{pred _}.foreach{items add _}

   val x = 12.+(87)

   // For example: you write this - using infix notation, sittin' pretty. this is precisely what infix notation
   // was made for, right? "getOrElse" is like an operator on options/maps, super handy.
   authorsToWordsAndCounts(author) getOrElse (word, 0)
   // then you realize that you need to add 1 to all the counts (Laplace smoothing) - no problem, just another operator, right?
   authorsToWordsAndCounts(author) getOrElse (word, 0) + 1
   // BZZZZ! WRONG! this fails to compile - I'm guessing cause method calls have lower precedence than arithmetic operators, so you
   // can write things like "x <- 1 until n - 1" and have it do what you want. This is why infix notation is nuts - it makes you
   // think about syntax all the time. What a waste of time...


 - POSTFIX NOTATION:
   No! Postfix notation was an attempt to make the snazzy operator notation work w/ trailing 0-argument methods - a very common use-case (ending a lazy comprehension with a strict "toList" or "toArray", etc). Postfix notation rocks the parser right in its face and has been generally agreed upon to be a Bad Idea. What isn't as generally agreed upon is that the lack of workable postfix notation is one of the biggest nails in the coffin of pervasive operator notation. It is unacceptable to have to make a new definition if I just want to "toSeq" at the end of a method chain - once again syntax is intruding way too much on how we write our code. The point of this guide is to eliminate that to the fullest extent possible.

   GOOD:

   xs.filter(_ < 5).toList
   xs.map(List(_)).flatten

   BAD:

   xs filter (_ < 5) toList
   xs map (List(_)) flatten


 - "ARGUMENT LIST" UNDERSCORES:
   What about turning methods into functions - should we use postfix underscore, or "(_)"? Postfix underscore looks irregular (we're not allowed to use postfix notation, except in this case? wtf) - it's just one more weird wrinkle. No thanks! Additionally, letting the "_" stand in for an entire argument list is just confusing and weird. You may notice my general philosophy is to prefer eta-expanded functions whenever possible - I think Scala's "_" lambdas are a great way to get the power and brevity of currying, while keeping the readability of eta expansion.

   GOOD:

   xs.toSeq.filter(pred(_)).foreach(items.add(_))
   xs.toSeq.filter(pred(_)).fold(combine(_, _))

   BAD:

   xs.toSeq.filter(pred _).foreach(items.add(_))
   xs.toSeq.filter(pred(_)).fold(combine _)

 - CALL BY NAME ARGUMENTS:
   Call by name arguments that are just meant to mimic lazy evaluation should be written the same as any other argument.
   Calls to methods with call by name arguments that are meant to be used as "blocks", to mimic control structures, should be written as if they were control structures - that is, put a space between the method name and the argument lists, and use curly braces to delimit the block. Note that this can actually require you to write the same method call differently in different circumstances (like Array.fill - are you filling it with a constant, or taking advantage of the call-by-nameness?):

   GOOD:

   timed ("doSomethingExpensive() took %d seconds") {
     doSomethingExpensive()
   }

   // Intent matters - this requires curly braces because the fact that the filler is re-evaluated is being put to use...
   val z = Array.fill (documents(di).length) { 
     scala.util.Random.nextInt(K)
   }

   val alpha = Array.fill(K)(50 / K)

   BAD:

   timed("doSomethingExpensive() took %d seconds") {
     doSomethingExpensive()
   }
   // This is just being used like a function and you know it!
   val alpha = Array.fill (K) { 50 / K }

 - MATCH:
   If you include curly braces around the body of each "case" clause, you are wrong. I mean, ewww. There's a war on, you know - no use senselessly wasting precious curly braces. If the body inside the case clause is one line, you can start it either on the same line as the pattern or on the subsequent line indented. If it is more than one line, start it on the subsequent line.

   GOOD:

   xs match {
     case a :: b :: tl => b :: a :: tl
     case Nil => Nil
   }

   xs match {
     case a :: b :: tl => 
       println("ah, this match clause sure looks neato")
       b :: a :: tl
     case Nil =>
       Nil
   }

   BAD:

   xs match {
     case a :: b :: tl => println("ah, this match clause sure looks neato")
       b :: a :: tl
     case Nil =>
       Nil
   }

   xs match {
     case hd :: tl => {
       println("help, I'm trapped inside a pair of curly braces!")
     }
     case Nil => {
       println("I'd help you, but I too am trapped inside curly braces...")
     }
   }
   // As an aside, this is one of the times writing a Scala style guide is really hard - everything always looks so cool.
   // I mean, I hate curly braces inside match as much as anyone, but Scala just can't help itself from looking badass and
   // futuristic even in this case!


  MULTIPLE ARGUMENT LISTS:
  If the last argument is a block, treat it like a call by name control structure and put a space before the first argument list (tentative).

  GOOD:

  val y = Array.tabulate (M) { di =>
    val doc = documents(di)
    Array.tabulate (doc.length) { wi => distinctWordToIndex(doc(wi)) }
  }


  BAD:

  val y = Array.tabulate(M) { di =>
    val doc = documents(di)
    Array.tabulate(doc.length) { wi => distinctWordToIndex(doc(wi)) }
  }


